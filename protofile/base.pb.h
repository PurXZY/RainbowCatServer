// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_base_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_base_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_base_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_base_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_base_2eproto;
namespace usercmd {
class BattleEntity;
class BattleEntityDefaultTypeInternal;
extern BattleEntityDefaultTypeInternal _BattleEntity_default_instance_;
class CastOperationC2SMsg;
class CastOperationC2SMsgDefaultTypeInternal;
extern CastOperationC2SMsgDefaultTypeInternal _CastOperationC2SMsg_default_instance_;
class CreateAllBattleEntitiesS2CMsg;
class CreateAllBattleEntitiesS2CMsgDefaultTypeInternal;
extern CreateAllBattleEntitiesS2CMsgDefaultTypeInternal _CreateAllBattleEntitiesS2CMsg_default_instance_;
class IntoRoomC2SMsg;
class IntoRoomC2SMsgDefaultTypeInternal;
extern IntoRoomC2SMsgDefaultTypeInternal _IntoRoomC2SMsg_default_instance_;
class IntoRoomS2cMsg;
class IntoRoomS2cMsgDefaultTypeInternal;
extern IntoRoomS2cMsgDefaultTypeInternal _IntoRoomS2cMsg_default_instance_;
class LoginC2SMsg;
class LoginC2SMsgDefaultTypeInternal;
extern LoginC2SMsgDefaultTypeInternal _LoginC2SMsg_default_instance_;
class LoginS2CMsg;
class LoginS2CMsgDefaultTypeInternal;
extern LoginS2CMsgDefaultTypeInternal _LoginS2CMsg_default_instance_;
class OperationResultS2CMsg;
class OperationResultS2CMsgDefaultTypeInternal;
extern OperationResultS2CMsgDefaultTypeInternal _OperationResultS2CMsg_default_instance_;
class TurnInfoS2CMsg;
class TurnInfoS2CMsgDefaultTypeInternal;
extern TurnInfoS2CMsgDefaultTypeInternal _TurnInfoS2CMsg_default_instance_;
}  // namespace usercmd
PROTOBUF_NAMESPACE_OPEN
template<> ::usercmd::BattleEntity* Arena::CreateMaybeMessage<::usercmd::BattleEntity>(Arena*);
template<> ::usercmd::CastOperationC2SMsg* Arena::CreateMaybeMessage<::usercmd::CastOperationC2SMsg>(Arena*);
template<> ::usercmd::CreateAllBattleEntitiesS2CMsg* Arena::CreateMaybeMessage<::usercmd::CreateAllBattleEntitiesS2CMsg>(Arena*);
template<> ::usercmd::IntoRoomC2SMsg* Arena::CreateMaybeMessage<::usercmd::IntoRoomC2SMsg>(Arena*);
template<> ::usercmd::IntoRoomS2cMsg* Arena::CreateMaybeMessage<::usercmd::IntoRoomS2cMsg>(Arena*);
template<> ::usercmd::LoginC2SMsg* Arena::CreateMaybeMessage<::usercmd::LoginC2SMsg>(Arena*);
template<> ::usercmd::LoginS2CMsg* Arena::CreateMaybeMessage<::usercmd::LoginS2CMsg>(Arena*);
template<> ::usercmd::OperationResultS2CMsg* Arena::CreateMaybeMessage<::usercmd::OperationResultS2CMsg>(Arena*);
template<> ::usercmd::TurnInfoS2CMsg* Arena::CreateMaybeMessage<::usercmd::TurnInfoS2CMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace usercmd {

enum UserCmd : int {
  LoginReq = 0,
  LoginRes = 1,
  IntoRoomReq = 2,
  IntoRoomRes = 3,
  CreateAllBattleEntities = 4,
  TurnInfo = 5,
  CastOperationReq = 6,
  OperationResultRes = 7,
  MaxCmdId = 8,
  UserCmd_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UserCmd_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UserCmd_IsValid(int value);
constexpr UserCmd UserCmd_MIN = LoginReq;
constexpr UserCmd UserCmd_MAX = MaxCmdId;
constexpr int UserCmd_ARRAYSIZE = UserCmd_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserCmd_descriptor();
template<typename T>
inline const std::string& UserCmd_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserCmd>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserCmd_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserCmd_descriptor(), enum_t_value);
}
inline bool UserCmd_Parse(
    const std::string& name, UserCmd* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserCmd>(
    UserCmd_descriptor(), name, value);
}
enum PosIndex : int {
  PosELeft = 0,
  PosECenter = 1,
  PosERight = 2,
  PosBLeft = 3,
  PosBCenter = 4,
  PosBRight = 5,
  PosIndex_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PosIndex_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PosIndex_IsValid(int value);
constexpr PosIndex PosIndex_MIN = PosELeft;
constexpr PosIndex PosIndex_MAX = PosBRight;
constexpr int PosIndex_ARRAYSIZE = PosIndex_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PosIndex_descriptor();
template<typename T>
inline const std::string& PosIndex_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PosIndex>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PosIndex_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PosIndex_descriptor(), enum_t_value);
}
inline bool PosIndex_Parse(
    const std::string& name, PosIndex* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PosIndex>(
    PosIndex_descriptor(), name, value);
}
// ===================================================================

class LoginC2SMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usercmd.LoginC2SMsg) */ {
 public:
  LoginC2SMsg();
  virtual ~LoginC2SMsg();

  LoginC2SMsg(const LoginC2SMsg& from);
  LoginC2SMsg(LoginC2SMsg&& from) noexcept
    : LoginC2SMsg() {
    *this = ::std::move(from);
  }

  inline LoginC2SMsg& operator=(const LoginC2SMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginC2SMsg& operator=(LoginC2SMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginC2SMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginC2SMsg* internal_default_instance() {
    return reinterpret_cast<const LoginC2SMsg*>(
               &_LoginC2SMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoginC2SMsg& a, LoginC2SMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginC2SMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginC2SMsg* New() const final {
    return CreateMaybeMessage<LoginC2SMsg>(nullptr);
  }

  LoginC2SMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginC2SMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginC2SMsg& from);
  void MergeFrom(const LoginC2SMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginC2SMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usercmd.LoginC2SMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
    return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // @@protoc_insertion_point(class_scope:usercmd.LoginC2SMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class LoginS2CMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usercmd.LoginS2CMsg) */ {
 public:
  LoginS2CMsg();
  virtual ~LoginS2CMsg();

  LoginS2CMsg(const LoginS2CMsg& from);
  LoginS2CMsg(LoginS2CMsg&& from) noexcept
    : LoginS2CMsg() {
    *this = ::std::move(from);
  }

  inline LoginS2CMsg& operator=(const LoginS2CMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginS2CMsg& operator=(LoginS2CMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginS2CMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginS2CMsg* internal_default_instance() {
    return reinterpret_cast<const LoginS2CMsg*>(
               &_LoginS2CMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoginS2CMsg& a, LoginS2CMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginS2CMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginS2CMsg* New() const final {
    return CreateMaybeMessage<LoginS2CMsg>(nullptr);
  }

  LoginS2CMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginS2CMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginS2CMsg& from);
  void MergeFrom(const LoginS2CMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginS2CMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usercmd.LoginS2CMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
    return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // uint32 playerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::uint32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:usercmd.LoginS2CMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class IntoRoomC2SMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usercmd.IntoRoomC2SMsg) */ {
 public:
  IntoRoomC2SMsg();
  virtual ~IntoRoomC2SMsg();

  IntoRoomC2SMsg(const IntoRoomC2SMsg& from);
  IntoRoomC2SMsg(IntoRoomC2SMsg&& from) noexcept
    : IntoRoomC2SMsg() {
    *this = ::std::move(from);
  }

  inline IntoRoomC2SMsg& operator=(const IntoRoomC2SMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntoRoomC2SMsg& operator=(IntoRoomC2SMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntoRoomC2SMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntoRoomC2SMsg* internal_default_instance() {
    return reinterpret_cast<const IntoRoomC2SMsg*>(
               &_IntoRoomC2SMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IntoRoomC2SMsg& a, IntoRoomC2SMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(IntoRoomC2SMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntoRoomC2SMsg* New() const final {
    return CreateMaybeMessage<IntoRoomC2SMsg>(nullptr);
  }

  IntoRoomC2SMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntoRoomC2SMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntoRoomC2SMsg& from);
  void MergeFrom(const IntoRoomC2SMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntoRoomC2SMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usercmd.IntoRoomC2SMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
    return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:usercmd.IntoRoomC2SMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class IntoRoomS2cMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usercmd.IntoRoomS2cMsg) */ {
 public:
  IntoRoomS2cMsg();
  virtual ~IntoRoomS2cMsg();

  IntoRoomS2cMsg(const IntoRoomS2cMsg& from);
  IntoRoomS2cMsg(IntoRoomS2cMsg&& from) noexcept
    : IntoRoomS2cMsg() {
    *this = ::std::move(from);
  }

  inline IntoRoomS2cMsg& operator=(const IntoRoomS2cMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntoRoomS2cMsg& operator=(IntoRoomS2cMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntoRoomS2cMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntoRoomS2cMsg* internal_default_instance() {
    return reinterpret_cast<const IntoRoomS2cMsg*>(
               &_IntoRoomS2cMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IntoRoomS2cMsg& a, IntoRoomS2cMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(IntoRoomS2cMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntoRoomS2cMsg* New() const final {
    return CreateMaybeMessage<IntoRoomS2cMsg>(nullptr);
  }

  IntoRoomS2cMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntoRoomS2cMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntoRoomS2cMsg& from);
  void MergeFrom(const IntoRoomS2cMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntoRoomS2cMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usercmd.IntoRoomS2cMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
    return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 1,
  };
  // uint32 RoomId = 1;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::uint32 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:usercmd.IntoRoomS2cMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 roomid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class BattleEntity :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usercmd.BattleEntity) */ {
 public:
  BattleEntity();
  virtual ~BattleEntity();

  BattleEntity(const BattleEntity& from);
  BattleEntity(BattleEntity&& from) noexcept
    : BattleEntity() {
    *this = ::std::move(from);
  }

  inline BattleEntity& operator=(const BattleEntity& from) {
    CopyFrom(from);
    return *this;
  }
  inline BattleEntity& operator=(BattleEntity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BattleEntity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BattleEntity* internal_default_instance() {
    return reinterpret_cast<const BattleEntity*>(
               &_BattleEntity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BattleEntity& a, BattleEntity& b) {
    a.Swap(&b);
  }
  inline void Swap(BattleEntity* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BattleEntity* New() const final {
    return CreateMaybeMessage<BattleEntity>(nullptr);
  }

  BattleEntity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BattleEntity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BattleEntity& from);
  void MergeFrom(const BattleEntity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BattleEntity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usercmd.BattleEntity";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
    return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosIndexFieldNumber = 1,
    kEntityTypeFieldNumber = 2,
    kHealthFieldNumber = 3,
    kPhysicalAttackFieldNumber = 4,
    kMagicAttackFieldNumber = 5,
    kPhysicalDefendFieldNumber = 6,
    kMagicDefendFieldNumber = 7,
    kMoveSpeedFieldNumber = 8,
  };
  // uint32 PosIndex = 1;
  void clear_posindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 posindex() const;
  void set_posindex(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 EntityType = 2;
  void clear_entitytype();
  ::PROTOBUF_NAMESPACE_ID::uint32 entitytype() const;
  void set_entitytype(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 Health = 3;
  void clear_health();
  ::PROTOBUF_NAMESPACE_ID::uint32 health() const;
  void set_health(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 PhysicalAttack = 4;
  void clear_physicalattack();
  ::PROTOBUF_NAMESPACE_ID::uint32 physicalattack() const;
  void set_physicalattack(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 MagicAttack = 5;
  void clear_magicattack();
  ::PROTOBUF_NAMESPACE_ID::uint32 magicattack() const;
  void set_magicattack(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 PhysicalDefend = 6;
  void clear_physicaldefend();
  ::PROTOBUF_NAMESPACE_ID::uint32 physicaldefend() const;
  void set_physicaldefend(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 MagicDefend = 7;
  void clear_magicdefend();
  ::PROTOBUF_NAMESPACE_ID::uint32 magicdefend() const;
  void set_magicdefend(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 MoveSpeed = 8;
  void clear_movespeed();
  ::PROTOBUF_NAMESPACE_ID::uint32 movespeed() const;
  void set_movespeed(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:usercmd.BattleEntity)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 posindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 entitytype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 health_;
  ::PROTOBUF_NAMESPACE_ID::uint32 physicalattack_;
  ::PROTOBUF_NAMESPACE_ID::uint32 magicattack_;
  ::PROTOBUF_NAMESPACE_ID::uint32 physicaldefend_;
  ::PROTOBUF_NAMESPACE_ID::uint32 magicdefend_;
  ::PROTOBUF_NAMESPACE_ID::uint32 movespeed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class CreateAllBattleEntitiesS2CMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usercmd.CreateAllBattleEntitiesS2CMsg) */ {
 public:
  CreateAllBattleEntitiesS2CMsg();
  virtual ~CreateAllBattleEntitiesS2CMsg();

  CreateAllBattleEntitiesS2CMsg(const CreateAllBattleEntitiesS2CMsg& from);
  CreateAllBattleEntitiesS2CMsg(CreateAllBattleEntitiesS2CMsg&& from) noexcept
    : CreateAllBattleEntitiesS2CMsg() {
    *this = ::std::move(from);
  }

  inline CreateAllBattleEntitiesS2CMsg& operator=(const CreateAllBattleEntitiesS2CMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAllBattleEntitiesS2CMsg& operator=(CreateAllBattleEntitiesS2CMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateAllBattleEntitiesS2CMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateAllBattleEntitiesS2CMsg* internal_default_instance() {
    return reinterpret_cast<const CreateAllBattleEntitiesS2CMsg*>(
               &_CreateAllBattleEntitiesS2CMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreateAllBattleEntitiesS2CMsg& a, CreateAllBattleEntitiesS2CMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAllBattleEntitiesS2CMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateAllBattleEntitiesS2CMsg* New() const final {
    return CreateMaybeMessage<CreateAllBattleEntitiesS2CMsg>(nullptr);
  }

  CreateAllBattleEntitiesS2CMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateAllBattleEntitiesS2CMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateAllBattleEntitiesS2CMsg& from);
  void MergeFrom(const CreateAllBattleEntitiesS2CMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAllBattleEntitiesS2CMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usercmd.CreateAllBattleEntitiesS2CMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
    return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntitiesFieldNumber = 1,
  };
  // repeated .usercmd.BattleEntity entities = 1;
  int entities_size() const;
  void clear_entities();
  ::usercmd::BattleEntity* mutable_entities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usercmd::BattleEntity >*
      mutable_entities();
  const ::usercmd::BattleEntity& entities(int index) const;
  ::usercmd::BattleEntity* add_entities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usercmd::BattleEntity >&
      entities() const;

  // @@protoc_insertion_point(class_scope:usercmd.CreateAllBattleEntitiesS2CMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usercmd::BattleEntity > entities_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class TurnInfoS2CMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usercmd.TurnInfoS2CMsg) */ {
 public:
  TurnInfoS2CMsg();
  virtual ~TurnInfoS2CMsg();

  TurnInfoS2CMsg(const TurnInfoS2CMsg& from);
  TurnInfoS2CMsg(TurnInfoS2CMsg&& from) noexcept
    : TurnInfoS2CMsg() {
    *this = ::std::move(from);
  }

  inline TurnInfoS2CMsg& operator=(const TurnInfoS2CMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline TurnInfoS2CMsg& operator=(TurnInfoS2CMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TurnInfoS2CMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TurnInfoS2CMsg* internal_default_instance() {
    return reinterpret_cast<const TurnInfoS2CMsg*>(
               &_TurnInfoS2CMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TurnInfoS2CMsg& a, TurnInfoS2CMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(TurnInfoS2CMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TurnInfoS2CMsg* New() const final {
    return CreateMaybeMessage<TurnInfoS2CMsg>(nullptr);
  }

  TurnInfoS2CMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TurnInfoS2CMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TurnInfoS2CMsg& from);
  void MergeFrom(const TurnInfoS2CMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TurnInfoS2CMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usercmd.TurnInfoS2CMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
    return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationSetFieldNumber = 4,
    kBigTurnIndexFieldNumber = 1,
    kSmallTurnIndexFieldNumber = 2,
    kCurEntityPosIndexFieldNumber = 3,
  };
  // repeated uint32 OperationSet = 4;
  int operationset_size() const;
  void clear_operationset();
  ::PROTOBUF_NAMESPACE_ID::uint32 operationset(int index) const;
  void set_operationset(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_operationset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      operationset() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_operationset();

  // uint32 BigTurnIndex = 1;
  void clear_bigturnindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 bigturnindex() const;
  void set_bigturnindex(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 SmallTurnIndex = 2;
  void clear_smallturnindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 smallturnindex() const;
  void set_smallturnindex(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 CurEntityPosIndex = 3;
  void clear_curentityposindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 curentityposindex() const;
  void set_curentityposindex(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:usercmd.TurnInfoS2CMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > operationset_;
  mutable std::atomic<int> _operationset_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bigturnindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 smallturnindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 curentityposindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class CastOperationC2SMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usercmd.CastOperationC2SMsg) */ {
 public:
  CastOperationC2SMsg();
  virtual ~CastOperationC2SMsg();

  CastOperationC2SMsg(const CastOperationC2SMsg& from);
  CastOperationC2SMsg(CastOperationC2SMsg&& from) noexcept
    : CastOperationC2SMsg() {
    *this = ::std::move(from);
  }

  inline CastOperationC2SMsg& operator=(const CastOperationC2SMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CastOperationC2SMsg& operator=(CastOperationC2SMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CastOperationC2SMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CastOperationC2SMsg* internal_default_instance() {
    return reinterpret_cast<const CastOperationC2SMsg*>(
               &_CastOperationC2SMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CastOperationC2SMsg& a, CastOperationC2SMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CastOperationC2SMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CastOperationC2SMsg* New() const final {
    return CreateMaybeMessage<CastOperationC2SMsg>(nullptr);
  }

  CastOperationC2SMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CastOperationC2SMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CastOperationC2SMsg& from);
  void MergeFrom(const CastOperationC2SMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CastOperationC2SMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usercmd.CastOperationC2SMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
    return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetIdsFieldNumber = 2,
    kOperationIdFieldNumber = 1,
  };
  // repeated uint32 TargetIds = 2;
  int targetids_size() const;
  void clear_targetids();
  ::PROTOBUF_NAMESPACE_ID::uint32 targetids(int index) const;
  void set_targetids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_targetids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      targetids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_targetids();

  // uint32 OperationId = 1;
  void clear_operationid();
  ::PROTOBUF_NAMESPACE_ID::uint32 operationid() const;
  void set_operationid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:usercmd.CastOperationC2SMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > targetids_;
  mutable std::atomic<int> _targetids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 operationid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class OperationResultS2CMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:usercmd.OperationResultS2CMsg) */ {
 public:
  OperationResultS2CMsg();
  virtual ~OperationResultS2CMsg();

  OperationResultS2CMsg(const OperationResultS2CMsg& from);
  OperationResultS2CMsg(OperationResultS2CMsg&& from) noexcept
    : OperationResultS2CMsg() {
    *this = ::std::move(from);
  }

  inline OperationResultS2CMsg& operator=(const OperationResultS2CMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationResultS2CMsg& operator=(OperationResultS2CMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OperationResultS2CMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OperationResultS2CMsg* internal_default_instance() {
    return reinterpret_cast<const OperationResultS2CMsg*>(
               &_OperationResultS2CMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(OperationResultS2CMsg& a, OperationResultS2CMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationResultS2CMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OperationResultS2CMsg* New() const final {
    return CreateMaybeMessage<OperationResultS2CMsg>(nullptr);
  }

  OperationResultS2CMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OperationResultS2CMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OperationResultS2CMsg& from);
  void MergeFrom(const OperationResultS2CMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationResultS2CMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "usercmd.OperationResultS2CMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
    return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:usercmd.OperationResultS2CMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginC2SMsg

// string name = 1;
inline void LoginC2SMsg::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginC2SMsg::name() const {
  // @@protoc_insertion_point(field_get:usercmd.LoginC2SMsg.name)
  return name_.GetNoArena();
}
inline void LoginC2SMsg::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:usercmd.LoginC2SMsg.name)
}
inline void LoginC2SMsg::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:usercmd.LoginC2SMsg.name)
}
inline void LoginC2SMsg::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:usercmd.LoginC2SMsg.name)
}
inline void LoginC2SMsg::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:usercmd.LoginC2SMsg.name)
}
inline std::string* LoginC2SMsg::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:usercmd.LoginC2SMsg.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginC2SMsg::release_name() {
  // @@protoc_insertion_point(field_release:usercmd.LoginC2SMsg.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginC2SMsg::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:usercmd.LoginC2SMsg.name)
}

// -------------------------------------------------------------------

// LoginS2CMsg

// uint32 playerId = 1;
inline void LoginS2CMsg::clear_playerid() {
  playerid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginS2CMsg::playerid() const {
  // @@protoc_insertion_point(field_get:usercmd.LoginS2CMsg.playerId)
  return playerid_;
}
inline void LoginS2CMsg::set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:usercmd.LoginS2CMsg.playerId)
}

// -------------------------------------------------------------------

// IntoRoomC2SMsg

// -------------------------------------------------------------------

// IntoRoomS2cMsg

// uint32 RoomId = 1;
inline void IntoRoomS2cMsg::clear_roomid() {
  roomid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IntoRoomS2cMsg::roomid() const {
  // @@protoc_insertion_point(field_get:usercmd.IntoRoomS2cMsg.RoomId)
  return roomid_;
}
inline void IntoRoomS2cMsg::set_roomid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:usercmd.IntoRoomS2cMsg.RoomId)
}

// -------------------------------------------------------------------

// BattleEntity

// uint32 PosIndex = 1;
inline void BattleEntity::clear_posindex() {
  posindex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BattleEntity::posindex() const {
  // @@protoc_insertion_point(field_get:usercmd.BattleEntity.PosIndex)
  return posindex_;
}
inline void BattleEntity::set_posindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  posindex_ = value;
  // @@protoc_insertion_point(field_set:usercmd.BattleEntity.PosIndex)
}

// uint32 EntityType = 2;
inline void BattleEntity::clear_entitytype() {
  entitytype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BattleEntity::entitytype() const {
  // @@protoc_insertion_point(field_get:usercmd.BattleEntity.EntityType)
  return entitytype_;
}
inline void BattleEntity::set_entitytype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  entitytype_ = value;
  // @@protoc_insertion_point(field_set:usercmd.BattleEntity.EntityType)
}

// uint32 Health = 3;
inline void BattleEntity::clear_health() {
  health_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BattleEntity::health() const {
  // @@protoc_insertion_point(field_get:usercmd.BattleEntity.Health)
  return health_;
}
inline void BattleEntity::set_health(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  health_ = value;
  // @@protoc_insertion_point(field_set:usercmd.BattleEntity.Health)
}

// uint32 PhysicalAttack = 4;
inline void BattleEntity::clear_physicalattack() {
  physicalattack_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BattleEntity::physicalattack() const {
  // @@protoc_insertion_point(field_get:usercmd.BattleEntity.PhysicalAttack)
  return physicalattack_;
}
inline void BattleEntity::set_physicalattack(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  physicalattack_ = value;
  // @@protoc_insertion_point(field_set:usercmd.BattleEntity.PhysicalAttack)
}

// uint32 MagicAttack = 5;
inline void BattleEntity::clear_magicattack() {
  magicattack_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BattleEntity::magicattack() const {
  // @@protoc_insertion_point(field_get:usercmd.BattleEntity.MagicAttack)
  return magicattack_;
}
inline void BattleEntity::set_magicattack(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  magicattack_ = value;
  // @@protoc_insertion_point(field_set:usercmd.BattleEntity.MagicAttack)
}

// uint32 PhysicalDefend = 6;
inline void BattleEntity::clear_physicaldefend() {
  physicaldefend_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BattleEntity::physicaldefend() const {
  // @@protoc_insertion_point(field_get:usercmd.BattleEntity.PhysicalDefend)
  return physicaldefend_;
}
inline void BattleEntity::set_physicaldefend(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  physicaldefend_ = value;
  // @@protoc_insertion_point(field_set:usercmd.BattleEntity.PhysicalDefend)
}

// uint32 MagicDefend = 7;
inline void BattleEntity::clear_magicdefend() {
  magicdefend_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BattleEntity::magicdefend() const {
  // @@protoc_insertion_point(field_get:usercmd.BattleEntity.MagicDefend)
  return magicdefend_;
}
inline void BattleEntity::set_magicdefend(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  magicdefend_ = value;
  // @@protoc_insertion_point(field_set:usercmd.BattleEntity.MagicDefend)
}

// uint32 MoveSpeed = 8;
inline void BattleEntity::clear_movespeed() {
  movespeed_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BattleEntity::movespeed() const {
  // @@protoc_insertion_point(field_get:usercmd.BattleEntity.MoveSpeed)
  return movespeed_;
}
inline void BattleEntity::set_movespeed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  movespeed_ = value;
  // @@protoc_insertion_point(field_set:usercmd.BattleEntity.MoveSpeed)
}

// -------------------------------------------------------------------

// CreateAllBattleEntitiesS2CMsg

// repeated .usercmd.BattleEntity entities = 1;
inline int CreateAllBattleEntitiesS2CMsg::entities_size() const {
  return entities_.size();
}
inline void CreateAllBattleEntitiesS2CMsg::clear_entities() {
  entities_.Clear();
}
inline ::usercmd::BattleEntity* CreateAllBattleEntitiesS2CMsg::mutable_entities(int index) {
  // @@protoc_insertion_point(field_mutable:usercmd.CreateAllBattleEntitiesS2CMsg.entities)
  return entities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usercmd::BattleEntity >*
CreateAllBattleEntitiesS2CMsg::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_list:usercmd.CreateAllBattleEntitiesS2CMsg.entities)
  return &entities_;
}
inline const ::usercmd::BattleEntity& CreateAllBattleEntitiesS2CMsg::entities(int index) const {
  // @@protoc_insertion_point(field_get:usercmd.CreateAllBattleEntitiesS2CMsg.entities)
  return entities_.Get(index);
}
inline ::usercmd::BattleEntity* CreateAllBattleEntitiesS2CMsg::add_entities() {
  // @@protoc_insertion_point(field_add:usercmd.CreateAllBattleEntitiesS2CMsg.entities)
  return entities_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::usercmd::BattleEntity >&
CreateAllBattleEntitiesS2CMsg::entities() const {
  // @@protoc_insertion_point(field_list:usercmd.CreateAllBattleEntitiesS2CMsg.entities)
  return entities_;
}

// -------------------------------------------------------------------

// TurnInfoS2CMsg

// uint32 BigTurnIndex = 1;
inline void TurnInfoS2CMsg::clear_bigturnindex() {
  bigturnindex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TurnInfoS2CMsg::bigturnindex() const {
  // @@protoc_insertion_point(field_get:usercmd.TurnInfoS2CMsg.BigTurnIndex)
  return bigturnindex_;
}
inline void TurnInfoS2CMsg::set_bigturnindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bigturnindex_ = value;
  // @@protoc_insertion_point(field_set:usercmd.TurnInfoS2CMsg.BigTurnIndex)
}

// uint32 SmallTurnIndex = 2;
inline void TurnInfoS2CMsg::clear_smallturnindex() {
  smallturnindex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TurnInfoS2CMsg::smallturnindex() const {
  // @@protoc_insertion_point(field_get:usercmd.TurnInfoS2CMsg.SmallTurnIndex)
  return smallturnindex_;
}
inline void TurnInfoS2CMsg::set_smallturnindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  smallturnindex_ = value;
  // @@protoc_insertion_point(field_set:usercmd.TurnInfoS2CMsg.SmallTurnIndex)
}

// uint32 CurEntityPosIndex = 3;
inline void TurnInfoS2CMsg::clear_curentityposindex() {
  curentityposindex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TurnInfoS2CMsg::curentityposindex() const {
  // @@protoc_insertion_point(field_get:usercmd.TurnInfoS2CMsg.CurEntityPosIndex)
  return curentityposindex_;
}
inline void TurnInfoS2CMsg::set_curentityposindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  curentityposindex_ = value;
  // @@protoc_insertion_point(field_set:usercmd.TurnInfoS2CMsg.CurEntityPosIndex)
}

// repeated uint32 OperationSet = 4;
inline int TurnInfoS2CMsg::operationset_size() const {
  return operationset_.size();
}
inline void TurnInfoS2CMsg::clear_operationset() {
  operationset_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TurnInfoS2CMsg::operationset(int index) const {
  // @@protoc_insertion_point(field_get:usercmd.TurnInfoS2CMsg.OperationSet)
  return operationset_.Get(index);
}
inline void TurnInfoS2CMsg::set_operationset(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  operationset_.Set(index, value);
  // @@protoc_insertion_point(field_set:usercmd.TurnInfoS2CMsg.OperationSet)
}
inline void TurnInfoS2CMsg::add_operationset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  operationset_.Add(value);
  // @@protoc_insertion_point(field_add:usercmd.TurnInfoS2CMsg.OperationSet)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
TurnInfoS2CMsg::operationset() const {
  // @@protoc_insertion_point(field_list:usercmd.TurnInfoS2CMsg.OperationSet)
  return operationset_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
TurnInfoS2CMsg::mutable_operationset() {
  // @@protoc_insertion_point(field_mutable_list:usercmd.TurnInfoS2CMsg.OperationSet)
  return &operationset_;
}

// -------------------------------------------------------------------

// CastOperationC2SMsg

// uint32 OperationId = 1;
inline void CastOperationC2SMsg::clear_operationid() {
  operationid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CastOperationC2SMsg::operationid() const {
  // @@protoc_insertion_point(field_get:usercmd.CastOperationC2SMsg.OperationId)
  return operationid_;
}
inline void CastOperationC2SMsg::set_operationid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  operationid_ = value;
  // @@protoc_insertion_point(field_set:usercmd.CastOperationC2SMsg.OperationId)
}

// repeated uint32 TargetIds = 2;
inline int CastOperationC2SMsg::targetids_size() const {
  return targetids_.size();
}
inline void CastOperationC2SMsg::clear_targetids() {
  targetids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CastOperationC2SMsg::targetids(int index) const {
  // @@protoc_insertion_point(field_get:usercmd.CastOperationC2SMsg.TargetIds)
  return targetids_.Get(index);
}
inline void CastOperationC2SMsg::set_targetids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  targetids_.Set(index, value);
  // @@protoc_insertion_point(field_set:usercmd.CastOperationC2SMsg.TargetIds)
}
inline void CastOperationC2SMsg::add_targetids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  targetids_.Add(value);
  // @@protoc_insertion_point(field_add:usercmd.CastOperationC2SMsg.TargetIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CastOperationC2SMsg::targetids() const {
  // @@protoc_insertion_point(field_list:usercmd.CastOperationC2SMsg.TargetIds)
  return targetids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CastOperationC2SMsg::mutable_targetids() {
  // @@protoc_insertion_point(field_mutable_list:usercmd.CastOperationC2SMsg.TargetIds)
  return &targetids_;
}

// -------------------------------------------------------------------

// OperationResultS2CMsg

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace usercmd

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::usercmd::UserCmd> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::usercmd::UserCmd>() {
  return ::usercmd::UserCmd_descriptor();
}
template <> struct is_proto_enum< ::usercmd::PosIndex> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::usercmd::PosIndex>() {
  return ::usercmd::PosIndex_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_base_2eproto
